events {
    worker_connections 1024;
}

http {
    lua_package_path "/etc/nginx/?.lua;;";
    server {
        listen 80;

        location /jwst {
            content_by_lua_block {
                local jwt_module = require "jwt_decoder"
                local cjson = require "cjson"
                local resty_openssl = require "resty.openssl"
                local resty_pkey = require "resty.openssl.pkey"

                local public_key = jwt_module.get_public_key()

                -- Parse the RSA Public Key
                local pkey, err = resty_pkey.new(public_key, {format = "PEM", type = "pu"})
                if not pkey then
                    ngx.log(ngx.ERR, "Failed to parse RSA public key: ", err)
                    ngx.status = 500
                    ngx.say("Failed to parse RSA public key: ", err)
                    return
                end

                -- Extract modulus and exponent
                local params = pkey:get_parameters()
                local n = params.n
                local e = params.e

                if not n or not e then
                    ngx.log(ngx.ERR, "Failed to extract key components")
                    ngx.status = 500
                    ngx.say("Failed to extract key components")
                    return
                end

                -- Convert modulus and exponent to base64url format
                local function base64url_encode(input)
                    return ngx.encode_base64(input)
                        :gsub('+', '-')
                        :gsub('/', '_')
                        :gsub('=', '')
                end

                -- Convert BigNum to binary string
                local function bn_to_bin(bn)
                    return bn:to_binary()
                end

                local jwks = {
                    keys = {
                        {
                            kty = "RSA",
                            use = "sig",
                            kid = "1",  -- Generate this dynamically?
                            alg = "RS256",
                            n = base64url_encode(bn_to_bin(n)),
                            e = base64url_encode(bn_to_bin(e))
                        }
                    }
                }
                
                ngx.header["Cache-Control"] = "max-age=15, public"
                ngx.header["Expires"] = ngx.http_time(ngx.time() + 15)

                ngx.header.content_type = "application/json"
                ngx.say(cjson.encode(jwks))
            }
        }

        location / {
            # Call the Lua script to decode the JWT and set the headers
            access_by_lua_file /etc/nginx/jwt_decoder.lua;

            # Proxy the request to your backend
            proxy_pass ${BACKEND_SERVER};
            proxy_set_header Authorization ""; # Optionally clear the original JWT

            # Forward all headers, including dynamically set ones
            proxy_pass_request_headers on;

            # WebSocket support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            # Additional useful headers
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Remove any upstream response headers that shouldn't be passed to the client
            proxy_hide_header X-Frame-Options;
            proxy_hide_header X-Content-Type-Options;
            proxy_hide_header X-XSS-Protection;
        }
    }
}
