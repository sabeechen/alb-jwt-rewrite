events {
    worker_connections 1024;
}

http {
    lua_package_path "/etc/nginx/?.lua;;";
    server {
        listen 80;

        location / {
            # Strip out any existing X-User- headers
            more_clear_input_headers 'X-User-*';
            
            # Call the Lua script to decode the JWT and set the headers
            access_by_lua_file /etc/nginx/jwt_decoder.lua;

            # Proxy the request to your backend
            proxy_pass ${BACKEND_SERVER};
            proxy_set_header Authorization ""; # Optionally clear the original JWT

            # Forward all headers, including dynamically set ones
            proxy_pass_request_headers on;

            # WebSocket support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            # Additional useful headers
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Remove any upstream response headers that shouldn't be passed to the client
            proxy_hide_header X-Frame-Options;
            proxy_hide_header X-Content-Type-Options;
            proxy_hide_header X-XSS-Protection;
        }

        location /debug/headers/upstream {
            default_type text/plain;
            content_by_lua_block {
                local headers = ngx.req.get_headers()
                local output = "Request Headers:\n\n"
                for k, v in pairs(headers) do
                    output = output .. k .. ": " .. tostring(v) .. "\n"
                end
                ngx.say(output)
            }
        }

        location /debug/headers/downstream {
            default_type text/plain;
            access_by_lua_file /etc/nginx/jwt_decoder.lua;
            content_by_lua_block {
                local headers = ngx.req.get_headers()
                local output = "Downstream Headers:\n\n"
                for k, v in pairs(headers) do
                    output = output .. k .. ": " .. tostring(v) .. "\n"
                end
                ngx.say(output)
            }
        }
    }
}
